group_by(article_id, user_id, key) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%d %H:%M:%S")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
filter(grepl("included", key)) # removes all labels and notes
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key
decisions <- read.csv("customizations_log.csv")
decisions <- read.csv("customizations_log.csv")
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key)
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
filter(grepl("included", key)) # removes all labels and notes
# Clean dataset
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
# removes all labels and notes
filter(grepl("included", key)) %>%
#Filter to keep only the most recent decision for each user
group_by(user_id) %>%
filter(created_at == max(created_at)) %>%
ungroup()
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
# removes all labels and notes
filter(grepl("included", key))
# Clean dataset
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
# removes all labels and notes
filter(grepl("included", key)) %>%
#Filter to keep only the most recent decision for each user
group_by(user_id, article_id) %>%
filter(created_at == max(created_at)) %>%
ungroup()
table(decisions_clean$decision)
test_data <- subset(head(decisions_clean))
View(test_data)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Preview dataset as is
table(decisions$key)
table(decisions$value)
View(screen_dat)
screen_dat <- screen_dat %>%
mutate(accession = sub("rayyan-", "", accession))
screen_dat <- screen_dat %>%
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(study_id = accession)
merged_dataset <- decisions_clean %>%
left_join(screen_dat, by = "study_id")
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(article_id = accession)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Preview dataset as is
table(decisions$key)
table(decisions$value)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Preview dataset as is
table(decisions$key)
table(decisions$value)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(article_id = accession)
# Clean dataset
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
# removes all labels and notes
filter(grepl("included", key)) %>%
#Filter to keep only the most recent decision for each user
group_by(user_id, article_id) %>%
filter(created_at == max(created_at)) %>%
ungroup()
table(decisions_clean$decision)
merged_dataset <- decisions_clean %>%
left_join(screen_dat, by = "article_id")
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
as.character(accession) %>%
rename(article_id = accession)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Preview dataset as is
table(decisions$key)
table(decisions$value)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
as.character(accession) %>%
rename(article_id = accession)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
as.character(accession)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession))
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
as.character(accession
screen_dat <- screen_dat %>%
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
as.character(accession) %>%
rename(article_id = accession)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
as.character(accession) %>%
rename(article_id = accession)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
as.character(accession)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession))
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = as.character(sub("rayyan-", "", accession)) %>%
rename(article_id = accession)
screen_dat <- screen_dat %>%
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(article_id = accession)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(article_id = accession) %>%
mutate(article_id = as.character(article_id)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(article_id = accession) %>%
mutate(article_id = as.character(article_id))
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Preview dataset as is
table(decisions$key)
table(decisions$value)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(article_id = accession) %>%
mutate(article_id = as.character(article_id))
# Clean dataset
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
# removes all labels and notes
filter(grepl("included", key)) %>%
#Filter to keep only the most recent decision for each user
group_by(user_id, article_id) %>%
filter(created_at == max(created_at)) %>%
ungroup()
table(decisions_clean$decision)
merged_dataset <- decisions_clean %>%
left_join(screen_dat, by = "article_id")
# Clean dataset
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
mutate(article_id = as.character(article_id)) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
# removes all labels and notes
filter(grepl("included", key)) %>%
#Filter to keep only the most recent decision for each user
group_by(user_id, article_id) %>%
filter(created_at == max(created_at)) %>%
ungroup()
table(decisions_clean$decision)
merged_dataset <- decisions_clean %>%
left_join(screen_dat, by = "article_id")
View(merged_dataset)
merged_dataset <- decisions_clean %>%
left_join(screen_dat, by = "article_id") %>%
select(created_at, user_id, article_id, key, decision, type, title, year, journal, volume, issue, author, keywords, abstract)
test_data <- subset(head(merged_dataset))
View(test_data)
test_data <- merged_dataset %>%
group_by(article_id) %>%
subset(head(merged_dataset))
test_data <- merged_dataset %>%
group_by(article_id) %>%
subset(head(merged_dataset))
test_data <- merged_dataset %>%
group_by(article_id)
View(test_data)
test_data <- subset(head(merged_dataset))
View(test_data)
test_data <- sample(merged_dataset$article_id, 10)
test_data <- merged_dataset %>%
sample(merged_dataset$article_id, 10)
test_data <- merged_dataset %>%
dataset$article_id[1:10]
test_data <- merged_dataset %>%
merged_dataset$article_id[1:10]
test_data <- merged_dataset
test_data <- merged_dataset
test_data <- merged_dataset %>%
subset(article_id == c(1074364391, 1074364410, 1074364509, 1074364513, 1074364390))
test_data <- merged_dataset
test_data <- merged_dataset %>%
subset(article_id == c("1074364391", "1074364410", "1074364509", "1074364513", "1074364390"))
test_data <- merged_dataset
test_data <- merged_dataset %>%
subset(subset=rownames == c("1074364391", "1074364410", "1074364509", "1074364513", "1074364390"))
test_articles <- c("1074364391", "1074364410", "1074364509", "1074364513", "1074364390")
test_data <- merged_dataset %>%
subset(subset=rownames == test_articles)
test_articles <- c("1074364391", "1074364410", "1074364509", "1074364513", "1074364390")
test_data <- merged_dataset %>%
filter(article_id %in% test_articles)
test_data <- merged_dataset %>%
filter(article_id %in% test_articles) %>%
group_by(study_id)
test_articles <- c("1074364391", "1074364410", "1074364509", "1074364513", "1074364390")
test_data <- merged_dataset %>%
filter(article_id %in% test_articles) %>%
group_by(article_id)
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
library(tidyverse)
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr) # To use read_csv
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Preview dataset as is
table(decisions$key)
table(decisions$value)
screen_dat <- screen_dat %>%
# removes ""rayyan-" to match decisions csv file
mutate(accession = sub("rayyan-", "", accession)) %>%
rename(article_id = accession) %>%
mutate(article_id = as.character(article_id))
View(screen_dat)
# Clean dataset
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key, value) %>%
group_by(article_id, user_id, key) %>%
mutate(article_id = as.character(article_id)) %>%
# convert time stamp format
mutate(created_at = as.POSIXct(created_at, format = "%Y-%m-%dT%H:%M:%OS", tz = "UTC")) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
)) %>%
rename(decision = value) %>%
mutate(decision = as.character(decision),
decision = case_when(
decision == "-1" ~ "exclude",
decision == "0" ~ "maybe",
decision == "1" ~ "include",
TRUE ~ decision)) %>%
# removes all labels and notes
filter(grepl("included", key)) %>%
#Filter to keep only the most recent decision for each user
group_by(user_id, article_id) %>%
filter(created_at == max(created_at)) %>%
ungroup()
table(decisions_clean$decision)
View(decisions)
View(decisions_clean)
merged_dataset <- decisions_clean %>%
left_join(screen_dat, by = "article_id") %>%
select(created_at, user_id, article_id, key, decision, type, title, year, journal, volume, issue, author, keywords, abstract)
View(merged_dataset)
test_articles <- c("1074364391", "1074364410", "1074364509", "1074364513", "1074364390")
test_data <- merged_dataset %>%
filter(article_id %in% test_articles) %>%
group_by(article_id)
View(test_data)
# Rate limits across one model (Default is "gpt-3.5-turbo-0613")
rate_limits <- rate_limits_per_minute()
app_obj <-
approximate_price_gpt(
data = merged_dataset, # RIS data
prompt = prompt,
studyid = article_id, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
app_obj <-
approximate_price_gpt(
data = merged_dataset, # RIS data
prompt = prompt,
studyid = article_id, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
app_obj <-
approximate_price_gpt(
data = merged_dataset, # RIS data
prompt = prompt,
studyid = article_id, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
prompt <- "Evaluate the following study based on the selection criteria for a systematic review on the use of R statistical programming in the course curriculum for applied research or statistics course at the college and university level. This search will include any studies that examine the use of R in an applied research course at the undergraduate or graduate level. This includes experimental, quasi experimental, observational, and qualitative studies. I would like to assess (1) Did the study include the R programming language? (2) Did the study take place in a college or university setting? (3) Does the study involve discipline(s) other than computer science? (4) Does the look at student experiences?"
app_obj <-
approximate_price_gpt(
data = merged_dataset, # RIS data
prompt = prompt,
studyid = article_id, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
# Rate limits across one model (Default is "gpt-3.5-turbo-0613")
rate_limits <- rate_limits_per_minute()
app_obj <-
approximate_price_gpt(
data = merged_dataset, # RIS data
prompt = prompt,
studyid = article_id, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
prompt <- "Evaluate the following study based on the selection criteria for a systematic review on the use of R statistical programming in the course curriculum for applied research or statistics course at the college and university level. This search will include any studies that examine the use of R in an applied research course at the undergraduate or graduate level. This includes experimental, quasi experimental, observational, and qualitative studies. I would like to assess (1) Did the study include the R programming language? (2) Did the study take place in a college or university setting? (3) Does the study involve discipline(s) other than computer science? (4) Does the look at student experiences?"
test_articles <- c("1074364391", "1074364410", "1074364509", "1074364513", "1074364390")
test_data <- merged_dataset %>%
filter(article_id %in% test_articles) %>%
group_by(article_id)
app_obj <-
approximate_price_gpt(
data = merged_dataset, # RIS data
prompt = prompt,
studyid = article_id, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)

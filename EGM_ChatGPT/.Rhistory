# We will use metafor for estimating the mean effect size
# We put our results into an object called placement_ma
# We will then need to call the object to see the results
placement_ma <- rma(yi = smd, # the variable with the ES
vi = varsmd, # the variable with the var(ES)
data = placement, # data set to use
method = "REML")  # method for RE model
# call the object to print it
placement_ma
# to produce a simple forest plot with an RE model
#  use the function forest.rma
#  You can type ?forest.rma on your console to learn about the function
# the input to the function is the object created by rma above
#  in our case it is placement_ma
forest.rma(placement_ma)
knitr::opts_chunk$set(echo = TRUE)
# libraries for visualizations
library(naniar)
install.packages("naniae")
install.packages("naniar")
# libraries for visualizations
library(naniar)
library(visdat)
# code to extend libraries for meta-analysis
source("wrappers.R")
# library for data wrangling and plotting
library(tidyverse)
# read in data
adt_data <- readRDS("adt_data.RDS")
# summary of missing variables
gg_miss_var(adt_data) +
labs(y="Missing Cases",
title = "Total Missingness by Variable") +
theme(axis.title.x = element_text(size =10),
axis.text.y = element_text(size=6))
# summary of percent missing variables
gg_miss_var(adt_data, show_pct = T) +
labs(y="Percent Missing Cases",
title = "Percent Missingness by Variable") +
theme(axis.title.x = element_text(size =10),
axis.text.y = element_text(size=6))
# summary plots using vis_dat and vis_miss
gg_summary_covariate_miss(adt_data)
# use select to get a smaller data set
# the first entry is the data set
# the following entries are the variables I want
adt_data2 <- select(adt_data,
g2perwhite, g1numsessions, g2perhisp, g1perhisp,
g1perblack, g2perblack, g1hrsperweek, g2numsessions,
g2txdays, g2hrsperweek)
# this command is from naniar for an upset plot
# nsets is the number of variables to use
gg_miss_upset(adt_data2, nsets = 10, nintersects = NA)
# This function provides the percent missing for each variable
#  The "se_g" weights the percent missing by the SE of the ES
mis_ma_var_summary(adt_data, "se_g", truncate = TRUE)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
install.packages("devtools")
devtools::install_github("MikkelVembye/AIscreenR")
install.packages("devtools")
# Load packages
library(AIscreenR)
install.packages("AIScreenR")
devtools::install_github("MikkelVembye/AIscreenR")
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
library(purrr)
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
library(usethis)
library(future)
Screen_dat<- system.file("extdata", "Screening1_withResults", package = "AIscreenR")
Screen_dat<- system.file("EGM_ChatGPT", "Screening1_withResults", package = "AIscreenR")
Screen_dat<- system.file("EGM_ChatGPT", "Screening1_withResults.ris", package = "AIscreenR")
Screen_dat <- system.file("EGM_ChatGPT", "Screening1_withResults.ris", package = "AIscreenR")
Screen_dat <- system.file("EGM_ChatGPT", "Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = FALSE)
Screen_dat <- system.file("EGM_ChatGPT", "Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("Desktop", "Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("Desktop/EGM_ChatGPT", "Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file(..., "Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("","Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("","Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("","Screening1_withResults.RIS", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("","Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
system.file("")
system.file(".")
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
# library(dplyr) Removed due to error
# library(purrr) Removed due to error
library(usethis)
library(future)
Screen_dat <- system.file("","Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("/Home/Desktop/EGM_ChatGPT","Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
Screen_dat <- system.file("~/Desktop/EGM_ChatGPT","Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
setwd()
setwd(dir)
getwd()
Screen_dat <- system.file("/Users/carolinechubb/Desktop/EGM_ChatGPT","Screening1_withResults.ris", package = "AIscreenR", lib.loc = NULL,
mustWork = TRUE)
library(revtools)
screen_dat <- read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
View(screen_dat)
View(screen_dat)
View(screen_dat)
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
screening_data <- read_csv("Screening1_withResults.csv")
View(screen_dat)
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
decisions <- read_csv("customizations_log.csv")
library(readr)
installed.packages(readr)
library(readr)
library(readr)
decisions <- read_csv("customizations_log.csv")
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
# library(dplyr) Removed due to error
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr). # To use read_csv
# Installation if missing
install.packages("devtools")
devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
# library(dplyr) Removed due to error
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr). # To use read_csv
install.packages("devtools")
# Installation if missing
install.packages("devtools")
devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
# library(dplyr) Removed due to error
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr) # To use read_csv
install.packages("devtools")
1
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
# library(dplyr) Removed due to error
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr) # To use read_csv
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read_csv("customizations_log.csv")
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read_csv("customizations_log.csv")
View(decisions)
View(screen_dat)
decisions <- decisions %>%
group_by(article_id)
library(dplyr)
decisions <- decisions %>%
group_by(article_id)
decisions <- decisions %>%
group_by(article_id)
decisions <- read_csv("customizations_log.csv")
decisions <- decisions %>%
group_by(article_id)
decisions <- decisions %>%
group_by(article_id, user_id)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read_csv("customizations_log.csv")
# Merge to include decisions
decisions <- decisions %>%
group_by(article_id, user_id, key)
# Rate limits across one model (Default is "gpt-3.5-turbo-0613")
rate_limits <- rate_limits_per_minute()
app_obj <-
approximate_price_gpt(
data = screen_dat, # RIS data
prompt = prompts,
studyid = studyid, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
prompt <- "Evaluate the following study based on the selection criteria for a systematic review on the use of R statistical programming in the course curriculum for applied research or statistics course at the college and university level. This search will include any studies that examine the use of R in an applied research course at the undergraduate or graduate level. This includes experimental, quasi experimental, observational, and qualitative studies. I would like to assess (1) Did the study include the R programming language? (2) Did the study take place in a college or university setting? (3) Does the study involve discipline(s) other than computer science? (4) Does the look at student experiences?"
app_obj <-
approximate_price_gpt(
data = screen_dat, # RIS data
prompt = prompts,
studyid = studyid, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
app_obj <-
approximate_price_gpt(
data = screen_dat, # RIS data
prompt = prompt,
studyid = studyid, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
app_obj <-
approximate_price_gpt(
data = screen_dat, # RIS data
prompt = prompt,
studyid = accession, # indicate the variable with the studyid in the data
title = title, # indicate the variable with the titles in the data
abstract = abstract, # indicate the variable with the abstracts in the data
model = c("gpt-3.5-turbo-0613", "gpt-3.5-turbo-0613", "gpt-4"),
reps = c(1, 10, 1),
top_p = c(0.001, 1)
)
app_obj
app_obj$price_dollar
app_obj$price_data
git init
# Installation if missing
install.packages("devtools")
devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr) # To use read_csv
install.packages("devtools")
install.packages("devtools")
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read_csv("customizations_log.csv")
library(dplyr)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read_csv("customizations_log.csv")
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Merge to include decisions
decisions <- decisions %>%
group_by(article_id, user_id, key)
#install.packages("usethis")
library(use)
#install.packages("usethis")
library(usethis)
usethis::use_git_config(user.name="cschubb", user.email="carolinesutton23@hotmail.com")
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr) # To use read_csv
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Merge to include decisions
decisions <- decisions %>%
group_by(article_id, user_id, key)
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
mutate(ymd_hms(created_at)) %>%
rename(date_time = `ymd_hms(created_at)`) %>%
select(-c(created_at)) %>%
mutate(key2 = key) %>%
mutate(key2 = replace(key2, key2 != "included", "excluded")) %>%
mutate(as.factor(key2)) %>%
rename(key_f = `as.factor(key2)`)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Merge to include decisions
decisions <- decisions %>%
group_by(article_id, user_id, key)
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
mutate(ymd_hms(created_at)) %>%
rename(date_time = `ymd_hms(created_at)`) %>%
select(-c(created_at)) %>%
mutate(key2 = key) %>%
mutate(key2 = replace(key2, key2 != "included", "excluded")) %>%
mutate(as.factor(key2)) %>%
rename(key_f = `as.factor(key2)`)
View(decisions)
# Installation if missing
#install.packages("devtools")
#devtools::install_github("MikkelVembye/AIscreenR")
# Load packages
library(AIscreenR)
library(revtools)
library(tibble)
library(dplyr)
library(tidyverse)
# library(purrr) Removed due to error
library(usethis)
library(future)
library(readr) # To use read_csv
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
mutate(ymd_hms(created_at)) %>%
rename(date_time = `ymd_hms(created_at)`) %>%
select(-c(created_at)) %>%
mutate(key2 = key) %>%
mutate(key2 = replace(key2, key2 != "included", "excluded")) %>%
mutate(as.factor(key2)) %>%
rename(key_f = `as.factor(key2)`)
# Reduce Number of Observations to 1
decisions_one <- decisions_clean %>%
group_by(article_id) %>%
filter(row_number() == n())
table(decisions_one$key_f)
View(decisions_one)
View(decisions_clean)
table(decisions_clean$key_f)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
View(decisions)
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Merge to include decisions
decisions <- decisions %>%
group_by(article_id, user_id, key)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Merge to include decisions
decisions <- decisions %>%
group_by(article_id, user_id, key)
View(decisions)
decisions <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key)
View(decisions)
# Load RIS file
screen_dat <- revtools::read_bibliography("Screening1_withResults.ris")
# Decision Key
decisions <- read.csv("customizations_log.csv")
# Merge to include decisions
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key)
View(decisions_clean)
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
mutate(user_id = replace(user_id, "231089" = "CS" | "296869" = "HS"))
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
mutate(user_id = replace(user_id, "231089" == "CS" | "296869"== "HS"))
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
recode_factor(user_id = replace(user_id, "231089" == "CS" | "296869"== "HS"))
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
recode_factor(user_id, "231089" == "CS" | "296869"== "HS"))
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
recode_factor(user_id, "231089" == "CS" | "296869"== "HS")
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
recode_factor(decisions_clean$user_id, "231089" == "CS" | "296869"== "HS")
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
mutate(user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
))
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
mutate(user_id = case_when(user_id == "231089" ~ "CS",user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
))
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key)
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
mutate(user_id = case_when(user_id == "231089" ~ "CS", user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
))
decisions_clean <- decisions %>%
select(created_at, user_id, article_id, key) %>%
group_by(article_id, user_id, key) %>%
# rename by coder
mutate(user_id = as.character(user_id),  # Convert user_id to character for case_when function
user_id = case_when(
user_id == "231089" ~ "CS",
user_id == "296869" ~ "HS",
TRUE ~ user_id  # Keeps other values as they are
))
View(decisions_clean)
table(decisions_clean$key)
